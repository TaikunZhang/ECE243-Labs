
C:/intelFPGA_lite/18.0/Ece243/Lab7/Part2/Part2.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 50 08 00 00 54 08 00 00 58 08 00 00     @...P...T...X...
  30:	5c 08 00 00 4c 08 00 00 60 08 00 00 64 08 00 00     \...L...`...d...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001c3 	bl	7e8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	0000094c 	.word	0x0000094c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d88 	.word	0x00000d88

00000124 <__cs3_heap_start_ptr>:
 124:	00000db0 	.word	0x00000db0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d90 	.word	0x00000d90
 170:	00000d93 	.word	0x00000d93
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d90 	.word	0x00000d90
 1bc:	00000d90 	.word	0x00000d90
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d90 	.word	0x00000d90
 200:	00000000 	.word	0x00000000
 204:	000008f0 	.word	0x000008f0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008f0 	.word	0x000008f0
 250:	00000d94 	.word	0x00000d94
 254:	00000950 	.word	0x00000950
 258:	00000000 	.word	0x00000000

0000025c <vsync>:
// code not shown for clear_screen() and draw_line() subroutines
void vsync(){
    volatile int* status_register =  0xFF203020;
    register int status;

    *status_register = 1; // set B to 1
 25c:	e3033fff 	movw	r3, #16383	; 0x3fff
 260:	e34f3f20 	movt	r3, #65312	; 0xff20
 264:	e3a02001 	mov	r2, #1
 268:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
    status = *(status_register + 3);
 26c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while((status & 0x001) != 0)
 270:	e3130001 	tst	r3, #1
 274:	012fff1e 	bxeq	lr
    {
        status = *(status_register + 3);
 278:	e3032fff 	movw	r2, #16383	; 0x3fff
 27c:	e34f2f20 	movt	r2, #65312	; 0xff20
 280:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    volatile int* status_register =  0xFF203020;
    register int status;

    *status_register = 1; // set B to 1
    status = *(status_register + 3);
    while((status & 0x001) != 0)
 284:	e3130001 	tst	r3, #1
 288:	1afffffc 	bne	280 <vsync+0x24>
 28c:	e12fff1e 	bx	lr

00000290 <plot_pixel>:
    }
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 290:	e3003dac 	movw	r3, #3500	; 0xdac
 294:	e3403000 	movt	r3, #0
 298:	e5933000 	ldr	r3, [r3]
 29c:	e1a00080 	lsl	r0, r0, #1
 2a0:	e0831501 	add	r1, r3, r1, lsl #10
 2a4:	e18120b0 	strh	r2, [r1, r0]
 2a8:	e12fff1e 	bx	lr

000002ac <clear_screen>:
}
//iterate through and draw black pixels

void clear_screen (){
 2ac:	e92d4070 	push	{r4, r5, r6, lr}
    int i,j;

    for (i = 0; i < 320; i++){
 2b0:	e3a05000 	mov	r5, #0
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}
//iterate through and draw black pixels

void clear_screen (){
 2b4:	e1a06005 	mov	r6, r5
 2b8:	ea000009 	b	2e4 <clear_screen+0x38>
    int i,j;

    for (i = 0; i < 320; i++){
        for (j = 0; j < 240; j++){

            plot_pixel(i,j,0);
 2bc:	e1a00005 	mov	r0, r5
 2c0:	e1a01004 	mov	r1, r4
 2c4:	e1a02006 	mov	r2, r6
 2c8:	ebfffff0 	bl	290 <plot_pixel>

void clear_screen (){
    int i,j;

    for (i = 0; i < 320; i++){
        for (j = 0; j < 240; j++){
 2cc:	e2844001 	add	r4, r4, #1
 2d0:	e35400f0 	cmp	r4, #240	; 0xf0
 2d4:	1afffff8 	bne	2bc <clear_screen+0x10>
//iterate through and draw black pixels

void clear_screen (){
    int i,j;

    for (i = 0; i < 320; i++){
 2d8:	e2855001 	add	r5, r5, #1
 2dc:	e3550d05 	cmp	r5, #320	; 0x140
 2e0:	08bd8070 	popeq	{r4, r5, r6, pc}
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}
//iterate through and draw black pixels

void clear_screen (){
 2e4:	e1a04006 	mov	r4, r6
 2e8:	eafffff3 	b	2bc <clear_screen+0x10>

000002ec <draw_line>:

            plot_pixel(i,j,0);
        }
    }
}
void draw_line( int x0, int y0, int x1, int y1, short int line_colour){
 2ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 2f0:	e24dd00c 	sub	sp, sp, #12
 2f4:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30

    if (abs(y1-y0) > abs(x1-x0)){
 2f8:	e0614003 	rsb	r4, r1, r3
 2fc:	e3540000 	cmp	r4, #0
 300:	b2644000 	rsblt	r4, r4, #0
 304:	e060c002 	rsb	r12, r0, r2
 308:	e35c0000 	cmp	r12, #0
 30c:	b26cc000 	rsblt	r12, r12, #0
 310:	e154000c 	cmp	r4, r12
 314:	da000005 	ble	330 <draw_line+0x44>
 318:	e1a0c002 	mov	r12, r2
        int temp = x0;
        x0 = y0;
        y0 = temp;

        temp = x1;
        x1 = y1;
 31c:	e1a02003 	mov	r2, r3
        y1 = temp;
 320:	e1a0300c 	mov	r3, r12
        }
    }
}
void draw_line( int x0, int y0, int x1, int y1, short int line_colour){

    if (abs(y1-y0) > abs(x1-x0)){
 324:	e1a0c000 	mov	r12, r0
        int temp = x0;
        x0 = y0;
 328:	e1a00001 	mov	r0, r1
        y0 = temp;
 32c:	e1a0100c 	mov	r1, r12

        temp = x1;
        x1 = y1;
        y1 = temp;
    }
    if (x0 > x1){
 330:	e1500002 	cmp	r0, r2
 334:	da000005 	ble	350 <draw_line+0x64>
 338:	e1a0c001 	mov	r12, r1
        x0 = x1;
        x1 = temp;

        temp = y0;

        y0 = y1;
 33c:	e1a01003 	mov	r1, r3
        y1 = temp;
 340:	e1a0300c 	mov	r3, r12

        temp = x1;
        x1 = y1;
        y1 = temp;
    }
    if (x0 > x1){
 344:	e1a0c000 	mov	r12, r0

        int temp = x0;
        x0 = x1;
 348:	e1a00002 	mov	r0, r2
        x1 = temp;
 34c:	e1a0200c 	mov	r2, r12

        y0 = y1;
        y1 = temp;

    }
    int deltax = x1 - x0;
 350:	e060a002 	rsb	r10, r0, r2
    int deltay = abs(y1 - y0);
 354:	e0616003 	rsb	r6, r1, r3
 358:	e3560000 	cmp	r6, #0
 35c:	b2666000 	rsblt	r6, r6, #0
    int error = -(deltax / 2);
 360:	e08a4faa 	add	r4, r10, r10, lsr #31
 364:	e1a040c4 	asr	r4, r4, #1
 368:	e2644000 	rsb	r4, r4, #0
    int y = y0;

    int y_step;

    if (y0 < y1){
        y_step = 1;
 36c:	e1510003 	cmp	r1, r3
 370:	a3e03000 	mvnge	r3, #0
 374:	b3a03001 	movlt	r3, #1
 378:	e58d3004 	str	r3, [sp, #4]
    else {
        y_step = -1;
    }

    int x;
    for (x = x0; x < x1 + 1; x++){
 37c:	e2828001 	add	r8, r2, #1
 380:	e1500008 	cmp	r0, r8
 384:	aa000011 	bge	3d0 <draw_line+0xe4>
 388:	e1a05000 	mov	r5, r0

    }
    int deltax = x1 - x0;
    int deltay = abs(y1 - y0);
    int error = -(deltax / 2);
    int y = y0;
 38c:	e1a07001 	mov	r7, r1
        y_step = -1;
    }

    int x;
    for (x = x0; x < x1 + 1; x++){
        if(abs(y1-y0) > abs(x1-x0)){
 390:	e02abfca 	eor	r11, r10, r10, asr #31
 394:	e04bbfca 	sub	r11, r11, r10, asr #31
 398:	e156000b 	cmp	r6, r11
            plot_pixel(y,x,line_colour);
 39c:	c1a00007 	movgt	r0, r7
 3a0:	c1a01005 	movgt	r1, r5
        }
        else {
            plot_pixel(x, y, line_colour);
 3a4:	d1a00005 	movle	r0, r5
 3a8:	d1a01007 	movle	r1, r7
 3ac:	e1a02009 	mov	r2, r9
 3b0:	ebffffb6 	bl	290 <plot_pixel>
        }

        error = error + deltay;

        if (error >= 0){
 3b4:	e0944006 	adds	r4, r4, r6
            y = y + y_step;
 3b8:	559d3004 	ldrpl	r3, [sp, #4]
 3bc:	50877003 	addpl	r7, r7, r3
            error = error - deltax;
 3c0:	506a4004 	rsbpl	r4, r10, r4
    else {
        y_step = -1;
    }

    int x;
    for (x = x0; x < x1 + 1; x++){
 3c4:	e2855001 	add	r5, r5, #1
 3c8:	e1550008 	cmp	r5, r8
 3cc:	bafffff1 	blt	398 <draw_line+0xac>
            error = error - deltax;
        }

    }

}
 3d0:	e28dd00c 	add	sp, sp, #12
 3d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003d8 <draw_moving_line>:
    clear_screen();
	draw_moving_line();
	while(1);

}
void draw_moving_line(){
 3d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 3dc:	e24dd00c 	sub	sp, sp, #12
	int y_increment = 1;
	  while (1){
		int y_erase = y;
		
		y = y + y_increment;
        draw_line(40,y_erase,240,y_erase,0x0);
 3e0:	e3a03000 	mov	r3, #0
 3e4:	e58d3000 	str	r3, [sp]
 3e8:	e3a00028 	mov	r0, #40	; 0x28
 3ec:	e1a01003 	mov	r1, r3
 3f0:	e3a020f0 	mov	r2, #240	; 0xf0
 3f4:	ebffffbc 	bl	2ec <draw_line>
        draw_line(40,y,240,y, 0x07E0); // this line is green
 3f8:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 3fc:	e58d3000 	str	r3, [sp]
 400:	e3a00028 	mov	r0, #40	; 0x28
 404:	e3a01001 	mov	r1, #1
 408:	e3a020f0 	mov	r2, #240	; 0xf0
 40c:	e1a03001 	mov	r3, r1
 410:	ebffffb5 	bl	2ec <draw_line>
	int y = 0;
	int y_increment = 1;
	  while (1){
		int y_erase = y;
		
		y = y + y_increment;
 414:	e3a05001 	mov	r5, #1

}
void draw_moving_line(){
	
	int y = 0;
	int y_increment = 1;
 418:	e1a06005 	mov	r6, r5
	  while (1){
		int y_erase = y;
		
		y = y + y_increment;
        draw_line(40,y_erase,240,y_erase,0x0);
 41c:	e3a09000 	mov	r9, #0
 420:	e3a08028 	mov	r8, #40	; 0x28
 424:	e3a070f0 	mov	r7, #240	; 0xf0
        draw_line(40,y,240,y, 0x07E0); // this line is green
 428:	e3a0ae7e 	mov	r10, #2016	; 0x7e0
		
		if (y >= 239){
			y_increment = -1;
 42c:	e3e0b000 	mvn	r11, #0
 430:	ea000004 	b	448 <draw_moving_line+0x70>
		}
		else if (y <= 0){
			y_increment = 1;
 434:	e3540000 	cmp	r4, #0
 438:	d3a06001 	movle	r6, #1
 43c:	ea000000 	b	444 <draw_moving_line+0x6c>
		y = y + y_increment;
        draw_line(40,y_erase,240,y_erase,0x0);
        draw_line(40,y,240,y, 0x07E0); // this line is green
		
		if (y >= 239){
			y_increment = -1;
 440:	e1a0600b 	mov	r6, r11
	int y = 0;
	int y_increment = 1;
	  while (1){
		int y_erase = y;
		
		y = y + y_increment;
 444:	e1a05004 	mov	r5, r4
		else if (y <= 0){
			y_increment = 1;
		}
		
		
        vsync();
 448:	ebffff83 	bl	25c <vsync>
	int y = 0;
	int y_increment = 1;
	  while (1){
		int y_erase = y;
		
		y = y + y_increment;
 44c:	e0864005 	add	r4, r6, r5
        draw_line(40,y_erase,240,y_erase,0x0);
 450:	e58d9000 	str	r9, [sp]
 454:	e1a00008 	mov	r0, r8
 458:	e1a01005 	mov	r1, r5
 45c:	e1a02007 	mov	r2, r7
 460:	e1a03005 	mov	r3, r5
 464:	ebffffa0 	bl	2ec <draw_line>
        draw_line(40,y,240,y, 0x07E0); // this line is green
 468:	e58da000 	str	r10, [sp]
 46c:	e1a00008 	mov	r0, r8
 470:	e1a01004 	mov	r1, r4
 474:	e1a02007 	mov	r2, r7
 478:	e1a03004 	mov	r3, r4
 47c:	ebffff9a 	bl	2ec <draw_line>
		
		if (y >= 239){
 480:	e35400ee 	cmp	r4, #238	; 0xee
 484:	caffffed 	bgt	440 <draw_moving_line+0x68>
 488:	eaffffe9 	b	434 <draw_moving_line+0x5c>

0000048c <main>:
int abs(int x);
void vsync();
void draw_moving_line();

int main(void)
{
 48c:	e92d4008 	push	{r3, lr}
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    /* Read location of the pixel buffer from the pixel buffer controller */
	pixel_buffer_start = *pixel_ctrl_ptr;
 490:	e3033fff 	movw	r3, #16383	; 0x3fff
 494:	e34f3f20 	movt	r3, #65312	; 0xff20
 498:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 49c:	e3003dac 	movw	r3, #3500	; 0xdac
 4a0:	e3403000 	movt	r3, #0
 4a4:	e5832000 	str	r2, [r3]
    clear_screen();
 4a8:	ebffff7f 	bl	2ac <clear_screen>
	draw_moving_line();
 4ac:	ebffffc9 	bl	3d8 <draw_moving_line>

000004b0 <abs>:
}
int abs(int x)
{
    if(x < 0) return (-1 * x);
    else return x;
 4b0:	e3500000 	cmp	r0, #0
 4b4:	b2600000 	rsblt	r0, r0, #0
 4b8:	e12fff1e 	bx	lr

000004bc <atexit>:
 4bc:	e1a01000 	mov	r1, r0
 4c0:	e3a00000 	mov	r0, #0
 4c4:	e92d4008 	push	{r3, lr}
 4c8:	e1a02000 	mov	r2, r0
 4cc:	e1a03000 	mov	r3, r0
 4d0:	eb00000e 	bl	510 <__register_exitproc>
 4d4:	e8bd4008 	pop	{r3, lr}
 4d8:	e12fff1e 	bx	lr

000004dc <exit>:
 4dc:	e92d4008 	push	{r3, lr}
 4e0:	e3a01000 	mov	r1, #0
 4e4:	e1a04000 	mov	r4, r0
 4e8:	eb000045 	bl	604 <__call_exitprocs>
 4ec:	e59f3018 	ldr	r3, [pc, #24]	; 50c <exit+0x30>
 4f0:	e5930000 	ldr	r0, [r3]
 4f4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4f8:	e3530000 	cmp	r3, #0
 4fc:	11a0e00f 	movne	lr, pc
 500:	112fff13 	bxne	r3
 504:	e1a00004 	mov	r0, r4
 508:	eb0000c9 	bl	834 <_exit>
 50c:	000008f4 	.word	0x000008f4

00000510 <__register_exitproc>:
 510:	e59fc0e4 	ldr	r12, [pc, #228]	; 5fc <__register_exitproc+0xec>
 514:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 518:	e59c4000 	ldr	r4, [r12]
 51c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 520:	e35c0000 	cmp	r12, #0
 524:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 528:	e59c5004 	ldr	r5, [r12, #4]
 52c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 530:	e355001f 	cmp	r5, #31
 534:	e24dd010 	sub	sp, sp, #16
 538:	e1a06000 	mov	r6, r0
 53c:	da000015 	ble	598 <__register_exitproc+0x88>
 540:	e59f00b8 	ldr	r0, [pc, #184]	; 600 <__register_exitproc+0xf0>
 544:	e3500000 	cmp	r0, #0
 548:	1a000001 	bne	554 <__register_exitproc+0x44>
 54c:	e3e00000 	mvn	r0, #0
 550:	ea000018 	b	5b8 <__register_exitproc+0xa8>
 554:	e3a00e19 	mov	r0, #400	; 0x190
 558:	e58d100c 	str	r1, [sp, #12]
 55c:	e58d2008 	str	r2, [sp, #8]
 560:	e58d3004 	str	r3, [sp, #4]
 564:	e320f000 	nop	{0}
 568:	e250c000 	subs	r12, r0, #0
 56c:	e59d100c 	ldr	r1, [sp, #12]
 570:	e59d2008 	ldr	r2, [sp, #8]
 574:	e59d3004 	ldr	r3, [sp, #4]
 578:	0afffff3 	beq	54c <__register_exitproc+0x3c>
 57c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 580:	e3a00000 	mov	r0, #0
 584:	e58c0004 	str	r0, [r12, #4]
 588:	e58c5000 	str	r5, [r12]
 58c:	e584c148 	str	r12, [r4, #328]	; 0x148
 590:	e58c0188 	str	r0, [r12, #392]	; 0x188
 594:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 598:	e3560000 	cmp	r6, #0
 59c:	e59c4004 	ldr	r4, [r12, #4]
 5a0:	1a000007 	bne	5c4 <__register_exitproc+0xb4>
 5a4:	e2843002 	add	r3, r4, #2
 5a8:	e2844001 	add	r4, r4, #1
 5ac:	e78c1103 	str	r1, [r12, r3, lsl #2]
 5b0:	e58c4004 	str	r4, [r12, #4]
 5b4:	e3a00000 	mov	r0, #0
 5b8:	e28dd010 	add	sp, sp, #16
 5bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5c0:	e12fff1e 	bx	lr
 5c4:	e3a00001 	mov	r0, #1
 5c8:	e1a00410 	lsl	r0, r0, r4
 5cc:	e08c8104 	add	r8, r12, r4, lsl #2
 5d0:	e3560002 	cmp	r6, #2
 5d4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 5d8:	e5883108 	str	r3, [r8, #264]	; 0x108
 5dc:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5e0:	e1877000 	orr	r7, r7, r0
 5e4:	01830000 	orreq	r0, r3, r0
 5e8:	e1a05008 	mov	r5, r8
 5ec:	e5882088 	str	r2, [r8, #136]	; 0x88
 5f0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5f4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5f8:	eaffffe9 	b	5a4 <__register_exitproc+0x94>
 5fc:	000008f4 	.word	0x000008f4
 600:	00000000 	.word	0x00000000

00000604 <__call_exitprocs>:
 604:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 608:	e59f3168 	ldr	r3, [pc, #360]	; 778 <__call_exitprocs+0x174>
 60c:	e5933000 	ldr	r3, [r3]
 610:	e24dd014 	sub	sp, sp, #20
 614:	e58d3004 	str	r3, [sp, #4]
 618:	e2833f52 	add	r3, r3, #328	; 0x148
 61c:	e58d0008 	str	r0, [sp, #8]
 620:	e58d300c 	str	r3, [sp, #12]
 624:	e1a07001 	mov	r7, r1
 628:	e3a08001 	mov	r8, #1
 62c:	e59d3004 	ldr	r3, [sp, #4]
 630:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 634:	e3560000 	cmp	r6, #0
 638:	e59db00c 	ldr	r11, [sp, #12]
 63c:	0a000033 	beq	710 <__call_exitprocs+0x10c>
 640:	e5965004 	ldr	r5, [r6, #4]
 644:	e2554001 	subs	r4, r5, #1
 648:	5286a088 	addpl	r10, r6, #136	; 0x88
 64c:	5285501f 	addpl	r5, r5, #31
 650:	508a5105 	addpl	r5, r10, r5, lsl #2
 654:	5a000007 	bpl	678 <__call_exitprocs+0x74>
 658:	ea000029 	b	704 <__call_exitprocs+0x100>
 65c:	e5953000 	ldr	r3, [r5]
 660:	e1530007 	cmp	r3, r7
 664:	0a000005 	beq	680 <__call_exitprocs+0x7c>
 668:	e2444001 	sub	r4, r4, #1
 66c:	e3740001 	cmn	r4, #1
 670:	e2455004 	sub	r5, r5, #4
 674:	0a000022 	beq	704 <__call_exitprocs+0x100>
 678:	e3570000 	cmp	r7, #0
 67c:	1afffff6 	bne	65c <__call_exitprocs+0x58>
 680:	e5963004 	ldr	r3, [r6, #4]
 684:	e06a2005 	rsb	r2, r10, r5
 688:	e2433001 	sub	r3, r3, #1
 68c:	e0862002 	add	r2, r6, r2
 690:	e1530004 	cmp	r3, r4
 694:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 698:	13a01000 	movne	r1, #0
 69c:	05864004 	streq	r4, [r6, #4]
 6a0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 6a4:	e3530000 	cmp	r3, #0
 6a8:	0affffee 	beq	668 <__call_exitprocs+0x64>
 6ac:	e1a02418 	lsl	r2, r8, r4
 6b0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6b4:	e1120001 	tst	r2, r1
 6b8:	e5969004 	ldr	r9, [r6, #4]
 6bc:	0a000016 	beq	71c <__call_exitprocs+0x118>
 6c0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6c4:	e1120001 	tst	r2, r1
 6c8:	1a000016 	bne	728 <__call_exitprocs+0x124>
 6cc:	e59d0008 	ldr	r0, [sp, #8]
 6d0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6d4:	e1a0e00f 	mov	lr, pc
 6d8:	e12fff13 	bx	r3
 6dc:	e5963004 	ldr	r3, [r6, #4]
 6e0:	e1530009 	cmp	r3, r9
 6e4:	1affffd0 	bne	62c <__call_exitprocs+0x28>
 6e8:	e59b3000 	ldr	r3, [r11]
 6ec:	e1530006 	cmp	r3, r6
 6f0:	1affffcd 	bne	62c <__call_exitprocs+0x28>
 6f4:	e2444001 	sub	r4, r4, #1
 6f8:	e3740001 	cmn	r4, #1
 6fc:	e2455004 	sub	r5, r5, #4
 700:	1affffdc 	bne	678 <__call_exitprocs+0x74>
 704:	e59f1070 	ldr	r1, [pc, #112]	; 77c <__call_exitprocs+0x178>
 708:	e3510000 	cmp	r1, #0
 70c:	1a000009 	bne	738 <__call_exitprocs+0x134>
 710:	e28dd014 	add	sp, sp, #20
 714:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 718:	e12fff1e 	bx	lr
 71c:	e1a0e00f 	mov	lr, pc
 720:	e12fff13 	bx	r3
 724:	eaffffec 	b	6dc <__call_exitprocs+0xd8>
 728:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 72c:	e1a0e00f 	mov	lr, pc
 730:	e12fff13 	bx	r3
 734:	eaffffe8 	b	6dc <__call_exitprocs+0xd8>
 738:	e5963004 	ldr	r3, [r6, #4]
 73c:	e3530000 	cmp	r3, #0
 740:	e5963000 	ldr	r3, [r6]
 744:	1a000008 	bne	76c <__call_exitprocs+0x168>
 748:	e3530000 	cmp	r3, #0
 74c:	0a000006 	beq	76c <__call_exitprocs+0x168>
 750:	e1a00006 	mov	r0, r6
 754:	e58b3000 	str	r3, [r11]
 758:	e320f000 	nop	{0}
 75c:	e59b6000 	ldr	r6, [r11]
 760:	e3560000 	cmp	r6, #0
 764:	1affffb5 	bne	640 <__call_exitprocs+0x3c>
 768:	eaffffe8 	b	710 <__call_exitprocs+0x10c>
 76c:	e1a0b006 	mov	r11, r6
 770:	e1a06003 	mov	r6, r3
 774:	eafffff9 	b	760 <__call_exitprocs+0x15c>
 778:	000008f4 	.word	0x000008f4
 77c:	00000000 	.word	0x00000000

00000780 <register_fini>:
 780:	e92d4008 	push	{r3, lr}
 784:	e59f3010 	ldr	r3, [pc, #16]	; 79c <register_fini+0x1c>
 788:	e3530000 	cmp	r3, #0
 78c:	159f000c 	ldrne	r0, [pc, #12]	; 7a0 <register_fini+0x20>
 790:	1bffff49 	blne	4bc <atexit>
 794:	e8bd4008 	pop	{r3, lr}
 798:	e12fff1e 	bx	lr
 79c:	0000091c 	.word	0x0000091c
 7a0:	000007a4 	.word	0x000007a4

000007a4 <__libc_fini_array>:
 7a4:	e92d4038 	push	{r3, r4, r5, lr}
 7a8:	e59f5030 	ldr	r5, [pc, #48]	; 7e0 <__libc_fini_array+0x3c>
 7ac:	e59f4030 	ldr	r4, [pc, #48]	; 7e4 <__libc_fini_array+0x40>
 7b0:	e0654004 	rsb	r4, r5, r4
 7b4:	e1b04144 	asrs	r4, r4, #2
 7b8:	10855104 	addne	r5, r5, r4, lsl #2
 7bc:	0a000004 	beq	7d4 <__libc_fini_array+0x30>
 7c0:	e5353004 	ldr	r3, [r5, #-4]!
 7c4:	e1a0e00f 	mov	lr, pc
 7c8:	e12fff13 	bx	r3
 7cc:	e2544001 	subs	r4, r4, #1
 7d0:	1afffffa 	bne	7c0 <__libc_fini_array+0x1c>
 7d4:	eb000050 	bl	91c <__libc_fini>
 7d8:	e8bd4038 	pop	{r3, r4, r5, lr}
 7dc:	e12fff1e 	bx	lr
 7e0:	00000934 	.word	0x00000934
 7e4:	00000938 	.word	0x00000938

000007e8 <__cs3_premain>:
 7e8:	e92d4008 	push	{r3, lr}
 7ec:	eb00001d 	bl	868 <__libc_init_array>
 7f0:	e59f3030 	ldr	r3, [pc, #48]	; 828 <__cs3_premain+0x40>
 7f4:	e3530000 	cmp	r3, #0
 7f8:	15930000 	ldrne	r0, [r3]
 7fc:	01a00003 	moveq	r0, r3
 800:	e59f3024 	ldr	r3, [pc, #36]	; 82c <__cs3_premain+0x44>
 804:	e3530000 	cmp	r3, #0
 808:	15931000 	ldrne	r1, [r3]
 80c:	01a01003 	moveq	r1, r3
 810:	e3a02000 	mov	r2, #0
 814:	ebffff1c 	bl	48c <main>
 818:	e59f3010 	ldr	r3, [pc, #16]	; 830 <__cs3_premain+0x48>
 81c:	e3530000 	cmp	r3, #0
 820:	1bffff2d 	blne	4dc <exit>
 824:	eafffffe 	b	824 <__cs3_premain+0x3c>
	...
 830:	000004dc 	.word	0x000004dc

00000834 <_exit>:
 834:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 838:	e3a00018 	mov	r0, #24
 83c:	e59f1004 	ldr	r1, [pc, #4]	; 848 <_exit+0x14>
 840:	ef123456 	svc	0x00123456
 844:	eafffffe 	b	844 <_exit+0x10>
 848:	00020026 	.word	0x00020026

0000084c <__cs3_isr_interrupt>:
 84c:	eafffffe 	b	84c <__cs3_isr_interrupt>

00000850 <__cs3_isr_undef>:
 850:	eafffffe 	b	850 <__cs3_isr_undef>

00000854 <__cs3_isr_swi>:
 854:	eafffffe 	b	854 <__cs3_isr_swi>

00000858 <__cs3_isr_pabort>:
 858:	eafffffe 	b	858 <__cs3_isr_pabort>

0000085c <__cs3_isr_dabort>:
 85c:	eafffffe 	b	85c <__cs3_isr_dabort>

00000860 <__cs3_isr_irq>:
 860:	eafffffe 	b	860 <__cs3_isr_irq>

00000864 <__cs3_isr_fiq>:
 864:	eafffffe 	b	864 <__cs3_isr_fiq>

00000868 <__libc_init_array>:
 868:	e92d4070 	push	{r4, r5, r6, lr}
 86c:	e59f506c 	ldr	r5, [pc, #108]	; 8e0 <__libc_init_array+0x78>
 870:	e59f606c 	ldr	r6, [pc, #108]	; 8e4 <__libc_init_array+0x7c>
 874:	e0656006 	rsb	r6, r5, r6
 878:	e1b06146 	asrs	r6, r6, #2
 87c:	12455004 	subne	r5, r5, #4
 880:	13a04000 	movne	r4, #0
 884:	0a000005 	beq	8a0 <__libc_init_array+0x38>
 888:	e5b53004 	ldr	r3, [r5, #4]!
 88c:	e2844001 	add	r4, r4, #1
 890:	e1a0e00f 	mov	lr, pc
 894:	e12fff13 	bx	r3
 898:	e1560004 	cmp	r6, r4
 89c:	1afffff9 	bne	888 <__libc_init_array+0x20>
 8a0:	e59f5040 	ldr	r5, [pc, #64]	; 8e8 <__libc_init_array+0x80>
 8a4:	e59f6040 	ldr	r6, [pc, #64]	; 8ec <__libc_init_array+0x84>
 8a8:	e0656006 	rsb	r6, r5, r6
 8ac:	eb000012 	bl	8fc <_init>
 8b0:	e1b06146 	asrs	r6, r6, #2
 8b4:	12455004 	subne	r5, r5, #4
 8b8:	13a04000 	movne	r4, #0
 8bc:	0a000005 	beq	8d8 <__libc_init_array+0x70>
 8c0:	e5b53004 	ldr	r3, [r5, #4]!
 8c4:	e2844001 	add	r4, r4, #1
 8c8:	e1a0e00f 	mov	lr, pc
 8cc:	e12fff13 	bx	r3
 8d0:	e1560004 	cmp	r6, r4
 8d4:	1afffff9 	bne	8c0 <__libc_init_array+0x58>
 8d8:	e8bd4070 	pop	{r4, r5, r6, lr}
 8dc:	e12fff1e 	bx	lr
 8e0:	00000914 	.word	0x00000914
 8e4:	00000914 	.word	0x00000914
 8e8:	00000914 	.word	0x00000914
 8ec:	0000091c 	.word	0x0000091c

Disassembly of section .rodata:

000008f4 <_global_impure_ptr>:
 8f4:	00000960 00000043                       `...C...

000008fc <_init>:
 8fc:	e1a0c00d 	mov	r12, sp
 900:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 904:	e24cb004 	sub	r11, r12, #4
 908:	e24bd028 	sub	sp, r11, #40	; 0x28
 90c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 910:	e12fff1e 	bx	lr

00000914 <__init_array_start>:
 914:	00000780 	.word	0x00000780

00000918 <__frame_dummy_init_array_entry>:
 918:	00000208                                ....

0000091c <__libc_fini>:
 91c:	e1a0c00d 	mov	r12, sp
 920:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 924:	e24cb004 	sub	r11, r12, #4
 928:	e24bd028 	sub	sp, r11, #40	; 0x28
 92c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 930:	e12fff1e 	bx	lr

00000934 <__fini_array_start>:
 934:	000001c4 	.word	0x000001c4

00000938 <__cs3_regions>:
	...
 944:	00000d90 	.word	0x00000d90
 948:	00000020 	.word	0x00000020

0000094c <__cs3_regions_end>:
 94c:	00000000 	.word	0x00000000
