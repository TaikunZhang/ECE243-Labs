
C:/intelFPGA_lite/18.0/Ece243/Lab4/Part4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
		  .text                   // executable code follows
          .global _start                  
_start:                             
						MOV     R3, #TEST_NUM   // load the data word ...
   0:	e3a03d06 	mov	r3, #384	; 0x180
						LDR     R8, =0xffffffff 
   4:	e3e08000 	mvn	r8, #0
						LDR     R10, =0xaaaaaaaa
   8:	e59fa1a0 	ldr	r10, [pc, #416]	; 1b0 <TEST_NUM+0x30>
						MOV     R5, #0          // holds greatest count of ones in a row
   c:	e3a05000 	mov	r5, #0
						MOV     R6, #0          // holds greatest count of zeros in a row
  10:	e3a06000 	mov	r6, #0
						MOV     R7, #0          // holds greatest count of 10 patterns
  14:	e3a07000 	mov	r7, #0
						MOV     R4, #0
  18:	e3a04000 	mov	r4, #0

0000001c <NEXT>:
					
NEXT: 					LDR     R9,[R3],#4 //get next word
  1c:	e4939004 	ldr	r9, [r3], #4

00000020 <MAIN>:

MAIN:              		CMP     R9,#0
  20:	e3590000 	cmp	r9, #0
						BEQ     END
  24:	0a000045 	beq	140 <END>
						MOV     R1,R9
  28:	e1a01009 	mov	r1, r9
						BL      COUNT_ZEROS
  2c:	eb00002a 	bl	dc <COUNT_ZEROS>

00000030 <STORE_ZERO_COUNT>:
						
STORE_ZERO_COUNT:   	CMP     R6,R0
  30:	e1560000 	cmp	r6, r0
						MOVLT   R6,R0
  34:	b1a06000 	movlt	r6, r0
						MOV     R1,R9
  38:	e1a01009 	mov	r1, r9
						BL      COUNT_ONES
  3c:	eb00002a 	bl	ec <COUNT_ONES>
						CMP     R5,R0
  40:	e1550000 	cmp	r5, r0
						MOVLT   R5,R0
  44:	b1a05000 	movlt	r5, r0
						MOV     R1,R9
  48:	e1a01009 	mov	r1, r9
						BL      COUNT_SEQUENCE
  4c:	eb00002e 	bl	10c <COUNT_SEQUENCE>

00000050 <STORE_SEQUENCE_COUNT>:
						
STORE_SEQUENCE_COUNT:	CMP     R7,R11
  50:	e157000b 	cmp	r7, r11
						MOVLT   R7,R11
  54:	b1a0700b 	movlt	r7, r11

00000058 <DISPLAY>:

/* Display R5 on HEX1-0, R6 on HEX3-2 and R7 on HEX5-4 */
DISPLAY:    LDR     R12, =0xFF200020 // base address of HEX3-HEX0
  58:	e59fc154 	ldr	r12, [pc, #340]	; 1b4 <TEST_NUM+0x34>
            MOV     R0, R5          // display R5 on HEX1-0
  5c:	e1a00005 	mov	r0, r5
            BL      DIVIDE          // ones digit will be in R0; tens
  60:	eb000037 	bl	144 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
  64:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
  68:	eb00003d 	bl	164 <SEG7_CODE>
            MOV     R4, R0          // save bit code
  6c:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
  70:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       
  74:	eb00003a 	bl	164 <SEG7_CODE>
            LSL     R0, #8
  78:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0
  7c:	e1844000 	orr	r4, r4, r0
			     
            //code for R6 
            MOV     R0,R6
  80:	e1a00006 	mov	r0, r6
			BL      DIVIDE
  84:	eb00002e 	bl	144 <DIVIDE>
			
			MOV     R9, R1
  88:	e1a09001 	mov	r9, r1
			BL 		SEG7_CODE
  8c:	eb000034 	bl	164 <SEG7_CODE>
			LSL     R0, #16
  90:	e1a00800 	lsl	r0, r0, #16
			ORR     R4, R0
  94:	e1844000 	orr	r4, r4, r0
			MOV     R0,R9
  98:	e1a00009 	mov	r0, r9
			
			BL      SEG7_CODE
  9c:	eb000030 	bl	164 <SEG7_CODE>
			LSL     R0,#24
  a0:	e1a00c00 	lsl	r0, r0, #24
			ORR     R4, R0
  a4:	e1844000 	orr	r4, r4, r0
			
            STR     R4, [R12]        // display the numbers from R6 and R5
  a8:	e58c4000 	str	r4, [r12]
			
            LDR     R12, =0xFF200030 // base address of HEX5-HEX4
  ac:	e59fc104 	ldr	r12, [pc, #260]	; 1b8 <TEST_NUM+0x38>
      
            MOV     R0, R7          // display R on HEX1-0
  b0:	e1a00007 	mov	r0, r7
            BL      DIVIDE          // ones digit will be in R0; tens
  b4:	eb000022 	bl	144 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
  b8:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
  bc:	eb000028 	bl	164 <SEG7_CODE>
            MOV     R4, R0          // save bit code
  c0:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
  c4:	e1a00009 	mov	r0, r9
                                    // code
            BL      SEG7_CODE       
  c8:	eb000025 	bl	164 <SEG7_CODE>
            LSL     R0, #8
  cc:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0
  d0:	e1844000 	orr	r4, r4, r0
            
            STR     R4, [R12]        // display the number from R7
  d4:	e58c4000 	str	r4, [r12]
						
						
						
			B NEXT
  d8:	eaffffcf 	b	1c <NEXT>

000000dc <COUNT_ZEROS>:
		  
		  
COUNT_ZEROS:      		MOV     R0, #0
  dc:	e3a00000 	mov	r0, #0
						EOR     R1, R8
  e0:	e0211008 	eor	r1, r1, r8
						BL      COUNT_ONES
  e4:	eb000000 	bl	ec <COUNT_ONES>
						B       STORE_ZERO_COUNT
  e8:	eaffffd0 	b	30 <STORE_ZERO_COUNT>

000000ec <COUNT_ONES>:
		  		  
COUNT_ONES:         	MOV     R0, #0          // R0 will hold the result
  ec:	e3a00000 	mov	r0, #0

000000f0 <LOOP_ONES>:
LOOP_ONES:          	CMP     R1, #0          // loop until the data contains no more 1's
  f0:	e3510000 	cmp	r1, #0
						BEQ     COUNT_ONES_END             
  f4:	0a000003 	beq	108 <COUNT_ONES_END>
						LSR     R2, R1, #1      // perform SHIFT, followed by AND
  f8:	e1a020a1 	lsr	r2, r1, #1
						AND     R1, R1, R2      
  fc:	e0011002 	and	r1, r1, r2
						ADD     R0, #1          // count the string length so far
 100:	e2800001 	add	r0, r0, #1
						B       LOOP_ONES 
 104:	eafffff9 	b	f0 <LOOP_ONES>

00000108 <COUNT_ONES_END>:
					
COUNT_ONES_END:     	MOV     PC,LR		
 108:	e1a0f00e 	mov	pc, lr

0000010c <COUNT_SEQUENCE>:
					
COUNT_SEQUENCE:     	MOV     R0, #0
 10c:	e3a00000 	mov	r0, #0
						MOV     R11, #0
 110:	e3a0b000 	mov	r11, #0
						EOR     R1, R10
 114:	e021100a 	eor	r1, r1, r10
						EOR     R1, R8
 118:	e0211008 	eor	r1, r1, r8
						BL      COUNT_ONES
 11c:	ebfffff2 	bl	ec <COUNT_ONES>
						CMP     R11,R0
 120:	e15b0000 	cmp	r11, r0
						MOVLT   R11,R0
 124:	b1a0b000 	movlt	r11, r0
						MOV     R1, R9
 128:	e1a01009 	mov	r1, r9
						EOR     R1, R10
 12c:	e021100a 	eor	r1, r1, r10
						BL      COUNT_ONES
 130:	ebffffed 	bl	ec <COUNT_ONES>
						CMP     R11,R0
 134:	e15b0000 	cmp	r11, r0
						MOVLT   R11,R0
 138:	b1a0b000 	movlt	r11, r0
						B       STORE_SEQUENCE_COUNT
 13c:	eaffffc3 	b	50 <STORE_SEQUENCE_COUNT>

00000140 <END>:
									
END:      				B       END             
 140:	eafffffe 	b	140 <END>

00000144 <DIVIDE>:

DIVIDE:     			MOV    R2, #0
 144:	e3a02000 	mov	r2, #0

00000148 <CONT>:
CONT:       			CMP    R0, #10
 148:	e350000a 	cmp	r0, #10
						BLT    DIV_END
 14c:	ba000002 	blt	15c <DIV_END>
						SUB    R0, #10
 150:	e240000a 	sub	r0, r0, #10
						ADD    R2, #1
 154:	e2822001 	add	r2, r2, #1
						B      CONT
 158:	eafffffa 	b	148 <CONT>

0000015c <DIV_END>:
DIV_END:    			MOV    R1, R2     // quotient in R1 (remainder in R0)
 15c:	e1a01002 	mov	r1, r2
						MOV    PC, LR       
 160:	e1a0f00e 	mov	pc, lr

00000164 <SEG7_CODE>:
/* Subroutine to convert the digits from 0 to 9 to be shown on a HEX display.
 *    Parameters: R0 = the decimal value of the digit to be displayed
 *    Returns: R0 = bit patterm to be written to the HEX display
 */

SEG7_CODE:  MOV     R1, #BIT_CODES  
 164:	e3a01f5d 	mov	r1, #372	; 0x174
            ADD     R1, R0         // index into the BIT_CODES "array"
 168:	e0811000 	add	r1, r1, r0
            LDRB    R0, [R1]       // load the bit pattern (to be returned)
 16c:	e5d10000 	ldrb	r0, [r1]
            MOV     PC, LR              
 170:	e1a0f00e 	mov	pc, lr

00000174 <BIT_CODES>:
 174:	4f5b063f 	.word	0x4f5b063f
 178:	077d6d66 	.word	0x077d6d66
 17c:	0000677f 	.word	0x0000677f

00000180 <TEST_NUM>:
 180:	ff000b51 	.word	0xff000b51
 184:	00000002 	.word	0x00000002
 188:	00000007 	.word	0x00000007
 18c:	0000000f 	.word	0x0000000f
 190:	0000001f 	.word	0x0000001f
 194:	0000002f 	.word	0x0000002f
 198:	0000007f 	.word	0x0000007f
 19c:	100000ff 	.word	0x100000ff
 1a0:	100001ff 	.word	0x100001ff
 1a4:	fffff2ff 	.word	0xfffff2ff
 1a8:	ffffffff 	.word	0xffffffff
 1ac:	00000000 	.word	0x00000000
 1b0:	aaaaaaaa 	.word	0xaaaaaaaa
 1b4:	ff200020 	.word	0xff200020
 1b8:	ff200030 	.word	0xff200030
