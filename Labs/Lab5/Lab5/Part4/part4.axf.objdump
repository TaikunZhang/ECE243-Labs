
C:/intelFPGA_lite/18.0/Ece243/Lab5/Part4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
	  .text                   // executable code follows
          .global _start          
		  
_start: ldr r5,=0xff200020   //hex address
   0:	e59f50f4 	ldr	r5, [pc, #244]	; fc <BIT_CODES+0xc>
		ldr r6,=2000000   //load 50 mill
   4:	e59f60f4 	ldr	r6, [pc, #244]	; 100 <BIT_CODES+0x10>
		ldr r9,=0xfffec600
   8:	e59f90f4 	ldr	r9, [pc, #244]	; 104 <BIT_CODES+0x14>
		str r6,[r9]  //str 50 mill in load register 
   c:	e5896000 	str	r6, [r9]
		mov r6,#3
  10:	e3a06003 	mov	r6, #3
		str r6,[r9,#0x8] //load A bit and E bit
  14:	e5896008 	str	r6, [r9, #8]
		mov r7,#0     //count register
  18:	e3a07000 	mov	r7, #0
		mov r11,#0
  1c:	e3a0b000 	mov	r11, #0
		mov r12,#0   //state register
  20:	e3a0c000 	mov	r12, #0
		mov r10,#0xf  //overwrite
  24:	e3a0a00f 	mov	r10, #15

00000028 <display>:


display: ldr r4,[r5,#0x3C] //key in r4	
  28:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
		 ands r6,r4,#0b1111
  2c:	e214600f 	ands	r6, r4, #15
		 blne set_bit
  30:	1b000020 	blne	b8 <set_bit>
		 cmp  r6,#0
  34:	e3560000 	cmp	r6, #0
		 eorgt r12,#1 //flip bit
  38:	c22cc001 	eorgt	r12, r12, #1
		 cmp r12,#1
  3c:	e35c0001 	cmp	r12, #1
		 beq count
  40:	0a000000 	beq	48 <count>
		 b   display
  44:	eafffff7 	b	28 <display>

00000048 <count>:
		 

count:  cmp r7,#99
  48:	e3570063 	cmp	r7, #99	; 0x63
		moveq r7,#0
  4c:	03a07000 	moveq	r7, #0
		addeq r11,#1
  50:	028bb001 	addeq	r11, r11, #1
		cmp r11,#59
  54:	e35b003b 	cmp	r11, #59	; 0x3b
		moveq r11,#0
  58:	03a0b000 	moveq	r11, #0
		add r7,#1
  5c:	e2877001 	add	r7, r7, #1
		
		mov r0,r7
  60:	e1a00007 	mov	r0, r7
		bl DIVIDE
  64:	eb000015 	bl	c0 <DIVIDE>
		mov r8,r1
  68:	e1a08001 	mov	r8, r1
		bl SEG7_CODE
  6c:	eb00001b 	bl	e0 <SEG7_CODE>
		strb r0,[r5]
  70:	e5c50000 	strb	r0, [r5]
		mov r0,r8
  74:	e1a00008 	mov	r0, r8
		bl SEG7_CODE
  78:	eb000018 	bl	e0 <SEG7_CODE>
		strb r0,[r5,#1]
  7c:	e5c50001 	strb	r0, [r5, #1]
		
		mov r0,r11
  80:	e1a0000b 	mov	r0, r11
		bl DIVIDE
  84:	eb00000d 	bl	c0 <DIVIDE>
		mov r8,r1
  88:	e1a08001 	mov	r8, r1
		bl SEG7_CODE
  8c:	eb000013 	bl	e0 <SEG7_CODE>
		strb r0,[r5,#2]
  90:	e5c50002 	strb	r0, [r5, #2]
		mov r0,r8
  94:	e1a00008 	mov	r0, r8
		bl SEG7_CODE
  98:	eb000010 	bl	e0 <SEG7_CODE>
		strb r0,[r5,#3]
  9c:	e5c50003 	strb	r0, [r5, #3]

000000a0 <delay>:

delay:  ldr r4,[r9,#0xc]
  a0:	e599400c 	ldr	r4, [r9, #12]
		and r4,#1
  a4:	e2044001 	and	r4, r4, #1
		cmp r4,#1
  a8:	e3540001 	cmp	r4, #1
		bne delay
  ac:	1afffffb 	bne	a0 <delay>
		str r4,[r9,#0xc]
  b0:	e589400c 	str	r4, [r9, #12]
		b display
  b4:	eaffffdb 	b	28 <display>

000000b8 <set_bit>:

set_bit: str r10,[r5,#0x3C]
  b8:	e585a03c 	str	r10, [r5, #60]	; 0x3c
		 mov pc,lr
  bc:	e1a0f00e 	mov	pc, lr

000000c0 <DIVIDE>:


DIVIDE:     			MOV    R2, #0
  c0:	e3a02000 	mov	r2, #0

000000c4 <CONT>:
CONT:       			CMP    R0, #10
  c4:	e350000a 	cmp	r0, #10
						BLT    DIV_END
  c8:	ba000002 	blt	d8 <DIV_END>
						SUB    R0, #10
  cc:	e240000a 	sub	r0, r0, #10
						ADD    R2, #1
  d0:	e2822001 	add	r2, r2, #1
						B      CONT
  d4:	eafffffa 	b	c4 <CONT>

000000d8 <DIV_END>:
DIV_END:    			MOV    R1, R2     // quotient in R1 (remainder in R0)
  d8:	e1a01002 	mov	r1, r2
						MOV    PC, LR       
  dc:	e1a0f00e 	mov	pc, lr

000000e0 <SEG7_CODE>:




SEG7_CODE:  MOV     R1, #BIT_CODES  
  e0:	e3a010f0 	mov	r1, #240	; 0xf0
            ADD     R1, R0         // index into the BIT_CODES "array"
  e4:	e0811000 	add	r1, r1, r0
            LDRB    R0, [R1]       // load the bit pattern (to be returned)
  e8:	e5d10000 	ldrb	r0, [r1]
            MOV     PC, LR              
  ec:	e1a0f00e 	mov	pc, lr

000000f0 <BIT_CODES>:
  f0:	4f5b063f 	.word	0x4f5b063f
  f4:	077d6d66 	.word	0x077d6d66
  f8:	0000677f 	.word	0x0000677f
  fc:	ff200020 	.word	0xff200020
 100:	001e8480 	.word	0x001e8480
 104:	fffec600 	.word	0xfffec600
