
C:/intelFPGA_lite/18.0/Ece243/Lab6/Part3Working/PART3.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000066 	b	1a4 <SERVICE_UND>
   8:	ea000066 	b	1a8 <SERVICE_SVC>
   c:	ea000067 	b	1b0 <SERVICE_ABT_INST>
  10:	ea000065 	b	1ac <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000048 	b	140 <SERVICE_IRQ>
  1c:	ea000064 	b	1b4 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
.text
.global  _start

_start:
/* Set up stack pointers for IRQ and SVC processor modes */
MOV      R0, #0b11010010    //IRQ mode bits
  40:	e3a000d2 	mov	r0, #210	; 0xd2
MSR      CPSR_c, R0        //change to IRQ mode
  44:	e121f000 	msr	CPSR_c, r0
LDRB     SP, =0x3000    //set SP
  48:	e3a0da03 	mov	sp, #12288	; 0x3000
MOV      R0, #0b11010011    //SVC mode bits
  4c:	e3a000d3 	mov	r0, #211	; 0xd3
MSR      CPSR, R0
  50:	e129f000 	msr	CPSR_fc, r0
LDR      SP, =0x3FFFFFFC
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

BL       CONFIG_GIC       // configure the ARM generic
  58:	eb000060 	bl	1e0 <CONFIG_GIC>
                          // interrupt controller
BL       CONFIG_TIMER     // configure the Interval Timer
  5c:	eb000044 	bl	174 <CONFIG_TIMER>
BL       CONFIG_KEYS      // configure the pushbutton
  60:	eb00004b 	bl	194 <CONFIG_KEYS>
                          // KEYs port

/* Enable IRQ interrupts in the ARM processor */
MOV      R0, #0b01010010    //IRQ mode bits
  64:	e3a00052 	mov	r0, #82	; 0x52
MSR      CPSR_c, R0        //change to IRQ mode/enable interrupt
  68:	e121f000 	msr	CPSR_c, r0

LDR      R5, =0xFF200000  // LEDR base address
  6c:	e59f514c 	ldr	r5, [pc, #332]	; 1c0 <RUN+0x4>

00000070 <LOOP>:

				  
LOOP:                                          
                  LDR      R3, COUNT        // global variable
  70:	e59f3140 	ldr	r3, [pc, #320]	; 1b8 <COUNT>
                  STR      R3, [R5]         // write to the LEDR lights
  74:	e5853000 	str	r3, [r5]
                  B        LOOP    
  78:	eafffffc 	b	70 <LOOP>

0000007c <KEY_ISR>:
				  
				  
KEY_ISR:
				  LDR      R0, =0xFF200000 //base address for interrupts
  7c:	e59f013c 	ldr	r0, [pc, #316]	; 1c0 <RUN+0x4>
				  LDR      R2, [R0, #0x5C]   //read edge capture register
  80:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
			      STR      R2, [R0, #0x5C]   //RESET INTERUPT
  84:	e580205c 	str	r2, [r0, #92]	; 0x5c
				  
				  
				  CMP      R2,#1
  88:	e3520001 	cmp	r2, #1
				  BEQ      NORM
  8c:	0a000004 	beq	a4 <NORM>
				  CMP      R2,#2
  90:	e3520002 	cmp	r2, #2
				  BEQ      DOUBLE
  94:	0a000007 	beq	b8 <DOUBLE>
				  CMP      R2,#4
  98:	e3520004 	cmp	r2, #4
				  BEQ      HALF
  9c:	0a000011 	beq	e8 <HALF>
				  MOV	   PC,LR
  a0:	e1a0f00e 	mov	pc, lr

000000a4 <NORM>:
				  
NORM:
				  LDR      R3, =RUN
  a4:	e59f3118 	ldr	r3, [pc, #280]	; 1c4 <RUN+0x8>
			      LDR      R0, [R3]
  a8:	e5930000 	ldr	r0, [r3]
		          EOR      R0, #1
  ac:	e2200001 	eor	r0, r0, #1
		          STR      R0, [R3]
  b0:	e5830000 	str	r0, [r3]
			      MOV      PC, LR				  
  b4:	e1a0f00e 	mov	pc, lr

000000b8 <DOUBLE>:
				  
DOUBLE:
				  LDR      R3, =0xFF202000     //BASE of interval timer register
  b8:	e59f3108 	ldr	r3, [pc, #264]	; 1c8 <RUN+0xc>
				  MOV      R0, #11
  bc:	e3a0000b 	mov	r0, #11
				  STR      R0, [R3, #4]     //stop timer
  c0:	e5830004 	str	r0, [r3, #4]
				  LDR      R2, [R3, #8]    //LOAD AND SHIFT 
  c4:	e5932008 	ldr	r2, [r3, #8]
				  LSR      R2, #1
  c8:	e1a020a2 	lsr	r2, r2, #1
				  STR      R2, [R3, #8]
  cc:	e5832008 	str	r2, [r3, #8]
				  LDR      R2, [R3, #12]
  d0:	e593200c 	ldr	r2, [r3, #12]
				  LSR      R2, #1
  d4:	e1a020a2 	lsr	r2, r2, #1
				  STR      R2, [R3, #12]
  d8:	e583200c 	str	r2, [r3, #12]

				  MOV      R0, #7
  dc:	e3a00007 	mov	r0, #7
				  STR      R0, [R3, #4]     //start timer
  e0:	e5830004 	str	r0, [r3, #4]

				  MOV      PC, LR	
  e4:	e1a0f00e 	mov	pc, lr

000000e8 <HALF>:


HALF:             //ONLY COUNT HALF
				  
				  LDR      R3, =0xFF202000     //BASE of interval timer register
  e8:	e59f30d8 	ldr	r3, [pc, #216]	; 1c8 <RUN+0xc>
				  MOV      R0, #0b1011
  ec:	e3a0000b 	mov	r0, #11
				  STR      R0, [R3, #0x4]     //stop timer
  f0:	e5830004 	str	r0, [r3, #4]

				  LDR      R2, [R3, #8]
  f4:	e5932008 	ldr	r2, [r3, #8]
				  LSL      R2, #1
  f8:	e1a02082 	lsl	r2, r2, #1
				  STR      R2, [R3, #8]
  fc:	e5832008 	str	r2, [r3, #8]
				  LDR      R2, [R3, #12]
 100:	e593200c 	ldr	r2, [r3, #12]
				  LSL      R2, #1
 104:	e1a02082 	lsl	r2, r2, #1
				  STR      R2, [R3, #12]
 108:	e583200c 	str	r2, [r3, #12]

				  MOV      R0, #7
 10c:	e3a00007 	mov	r0, #7
				  STR      R0, [R3, #4]     //start timer
 110:	e5830004 	str	r0, [r3, #4]

				  MOV      PC, LR
 114:	e1a0f00e 	mov	pc, lr

00000118 <TIMER_ISR>:
				  

TIMER_ISR:        LDR      R2, =COUNT //get the count value
 118:	e59f20ac 	ldr	r2, [pc, #172]	; 1cc <RUN+0x10>
LDR      R0, [R2]
 11c:	e5920000 	ldr	r0, [r2]
LDR      R3, =RUN  //get the run value
 120:	e59f309c 	ldr	r3, [pc, #156]	; 1c4 <RUN+0x8>
LDR      R3, [R3]
 124:	e5933000 	ldr	r3, [r3]
ADD      R0, R3    //increment the sum
 128:	e0800003 	add	r0, r0, r3
STR      R0, [R2]  //store the new sum
 12c:	e5820000 	str	r0, [r2]
LDR      R0, =0xFF202000
 130:	e59f0090 	ldr	r0, [pc, #144]	; 1c8 <RUN+0xc>
MOV      R2, #0
 134:	e3a02000 	mov	r2, #0
STR      R2, [R0] //reset the flag for interrupt
 138:	e5802000 	str	r2, [r0]

MOV      PC, LR
 13c:	e1a0f00e 	mov	pc, lr

00000140 <SERVICE_IRQ>:

SERVICE_IRQ:      PUSH     {R0-R7, LR}
 140:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
LDR      R4, =0xFFFEC100 // GIC CPU interface base address
 144:	e59f4084 	ldr	r4, [pc, #132]	; 1d0 <RUN+0x14>
LDR      R1, [R4, #0x0C] // read the ICCIAR in the CPU
 148:	e594100c 	ldr	r1, [r4, #12]

0000014c <TIMER_HANDLER>:
                                           // interface
TIMER_HANDLER: CMP R1,#72
 14c:	e3510048 	cmp	r1, #72	; 0x48
BNE      KEYS_HANDLER
 150:	1a000001 	bne	15c <KEYS_HANDLER>
BL       TIMER_ISR
 154:	ebffffef 	bl	118 <TIMER_ISR>
B        EXIT_IRQ
 158:	ea000002 	b	168 <EXIT_IRQ>

0000015c <KEYS_HANDLER>:

KEYS_HANDLER: CMP R1,#73
 15c:	e3510049 	cmp	r1, #73	; 0x49

00000160 <UNEXPECTED>:
UNEXPECTED:       BNE      UNEXPECTED
 160:	1afffffe 	bne	160 <UNEXPECTED>
BL       KEY_ISR
 164:	ebffffc4 	bl	7c <KEY_ISR>

00000168 <EXIT_IRQ>:
EXIT_IRQ:         STR      R1, [R4, #0x10] // write to the End of Interrupt
 168:	e5841010 	str	r1, [r4, #16]
       // Register (ICCEOIR)
POP      {R0-R7, LR}
 16c:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
SUBS     PC, LR, #4      // return from exception
 170:	e25ef004 	subs	pc, lr, #4

00000174 <CONFIG_TIMER>:

/* Configure the Interval Timer to create interrupts at 0.25 second intervals */
CONFIG_TIMER:

LDR   R3, =0xFF202000     //BASE of interval timer register
 174:	e59f304c 	ldr	r3, [pc, #76]	; 1c8 <RUN+0xc>
LDR   R2, =0b0111100001000000 //lower bits of .25 second time
 178:	e59f2054 	ldr	r2, [pc, #84]	; 1d4 <RUN+0x18>
STR   R2, [R3, #8]
 17c:	e5832008 	str	r2, [r3, #8]
LDR   R2, =0b0000000101111101 //upper bits of .25 second time
 180:	e59f2050 	ldr	r2, [pc, #80]	; 1d8 <RUN+0x1c>
STR   R2, [R3, #0xC]
 184:	e583200c 	str	r2, [r3, #12]
MOV   R2, #0b111   //enable Interrupt, run, and contnue
 188:	e3a02007 	mov	r2, #7
STR   R2, [R3, #4]        //start timer
 18c:	e5832004 	str	r2, [r3, #4]
BX       LR
 190:	e12fff1e 	bx	lr

00000194 <CONFIG_KEYS>:

/* Configure the pushbutton KEYS to generate interrupts */
CONFIG_KEYS:
LDR      R2, =0xFF200058 //base address for interrupts
 194:	e59f2040 	ldr	r2, [pc, #64]	; 1dc <RUN+0x20>
MOV      R3, #0b1111
 198:	e3a0300f 	mov	r3, #15
STR      R3, [R2]          //set interrupt mask to 0b1111
 19c:	e5823000 	str	r3, [r2]
BX       LR
 1a0:	e12fff1e 	bx	lr

000001a4 <SERVICE_UND>:
/* Undefined instructions */
SERVICE_UND:
B   SERVICE_UND
 1a4:	eafffffe 	b	1a4 <SERVICE_UND>

000001a8 <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:
B   SERVICE_SVC
 1a8:	eafffffe 	b	1a8 <SERVICE_SVC>

000001ac <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:
B   SERVICE_ABT_DATA
 1ac:	eafffffe 	b	1ac <SERVICE_ABT_DATA>

000001b0 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:
B   SERVICE_ABT_INST
 1b0:	eafffffe 	b	1b0 <SERVICE_ABT_INST>

000001b4 <SERVICE_FIQ>:
SERVICE_FIQ:
B   SERVICE_FIQ
 1b4:	eafffffe 	b	1b4 <SERVICE_FIQ>

000001b8 <COUNT>:
 1b8:	00000000 	.word	0x00000000

000001bc <RUN>:
 1bc:	00000001 	.word	0x00000001
 1c0:	ff200000 	.word	0xff200000
 1c4:	000001bc 	.word	0x000001bc
 1c8:	ff202000 	.word	0xff202000
 1cc:	000001b8 	.word	0x000001b8
 1d0:	fffec100 	.word	0xfffec100
 1d4:	00007840 	.word	0x00007840
 1d8:	0000017d 	.word	0x0000017d
 1dc:	ff200058 	.word	0xff200058

000001e0 <CONFIG_GIC>:
 1e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1e4:	e3a0001d 	mov	r0, #29
 1e8:	e3a01001 	mov	r1, #1
 1ec:	eb00000d 	bl	228 <CONFIG_INTERRUPT>
 1f0:	e3a00048 	mov	r0, #72	; 0x48
 1f4:	e3a01001 	mov	r1, #1
 1f8:	eb00000a 	bl	228 <CONFIG_INTERRUPT>
 1fc:	e3a00049 	mov	r0, #73	; 0x49
 200:	e3a01001 	mov	r1, #1
 204:	eb000007 	bl	228 <CONFIG_INTERRUPT>
 208:	e59f0060 	ldr	r0, [pc, #96]	; 270 <__cs3_region_init_size_ram>
 20c:	e59f1060 	ldr	r1, [pc, #96]	; 274 <__cs3_region_init_size_ram+0x4>
 210:	e5801004 	str	r1, [r0, #4]
 214:	e3a01001 	mov	r1, #1
 218:	e5801000 	str	r1, [r0]
 21c:	e59f0054 	ldr	r0, [pc, #84]	; 278 <__cs3_region_init_size_ram+0x8>
 220:	e5801000 	str	r1, [r0]
 224:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000228 <CONFIG_INTERRUPT>:
 228:	e92d4030 	push	{r4, r5, lr}
 22c:	e1a041a0 	lsr	r4, r0, #3
 230:	e3c44003 	bic	r4, r4, #3
 234:	e59f2040 	ldr	r2, [pc, #64]	; 27c <__cs3_region_init_size_ram+0xc>
 238:	e0824004 	add	r4, r2, r4
 23c:	e200201f 	and	r2, r0, #31
 240:	e3a05001 	mov	r5, #1
 244:	e1a02215 	lsl	r2, r5, r2
 248:	e5943000 	ldr	r3, [r4]
 24c:	e1833002 	orr	r3, r3, r2
 250:	e5843000 	str	r3, [r4]
 254:	e3c04003 	bic	r4, r0, #3
 258:	e59f2020 	ldr	r2, [pc, #32]	; 280 <__cs3_region_init_size_ram+0x10>
 25c:	e0824004 	add	r4, r2, r4
 260:	e2002003 	and	r2, r0, #3
 264:	e0824004 	add	r4, r2, r4
 268:	e5c41000 	strb	r1, [r4]
 26c:	e8bd8030 	pop	{r4, r5, pc}
 270:	fffec100 	.word	0xfffec100
 274:	0000ffff 	.word	0x0000ffff
 278:	fffed000 	.word	0xfffed000
 27c:	fffed100 	.word	0xfffed100
 280:	fffed800 	.word	0xfffed800

00000284 <SERVICE_UND>:
 284:	eafffffe 	b	284 <SERVICE_UND>

00000288 <SERVICE_SVC>:
 288:	eafffffe 	b	288 <SERVICE_SVC>

0000028c <SERVICE_ABT_DATA>:
 28c:	eafffffe 	b	28c <SERVICE_ABT_DATA>

00000290 <SERVICE_ABT_INST>:
 290:	eafffffe 	b	290 <SERVICE_ABT_INST>

00000294 <SERVICE_FIQ>:
 294:	eafffffe 	b	294 <SERVICE_FIQ>
