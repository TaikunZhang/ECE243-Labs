
C:/intelFPGA_lite/18.0/Ece243/Lab6/PART1WORKING/part1.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000040 	b	10c <SERVICE_UND>
   8:	ea000040 	b	110 <SERVICE_SVC>
   c:	ea000041 	b	118 <SERVICE_ABT_INST>
  10:	ea00003f 	b	114 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000032 	b	e8 <SERVICE_IRQ>
  1c:	ea00003e 	b	11c <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
                B        SERVICE_FIQ         // FIQ interrupt vector

                .text    
                .global  _start 

_start:         MOV R1, #0b11010010 // IRQ 
  40:	e3a010d2 	mov	r1, #210	; 0xd2
				MSR CPSR_c, R1                       
  44:	e121f001 	msr	CPSR_c, r1
				LDRB SP,=0x30000
  48:	e3a0d803 	mov	sp, #196608	; 0x30000
                MOV R1, #0b11010011 // SVC
  4c:	e3a010d3 	mov	r1, #211	; 0xd3
				MSR CPSR_c, R1 // change to IRQ mode
  50:	e121f001 	msr	CPSR_c, r1
				LDR SP,=0xFFFFFFFC
  54:	e3e0d003 	mvn	sp, #3

                BL CONFIG_GIC      // configure the ARM generic
  58:	eb000035 	bl	134 <CONFIG_GIC>
                                         // interrupt controller

				LDR R0, =0xFF200050 // pushbutton key base address
  5c:	e59f00bc 	ldr	r0, [pc, #188]	; 120 <SERVICE_FIQ+0x4>
				MOV R1, #0xF // set interrupt mask bits
  60:	e3a0100f 	mov	r1, #15
				STR R1, [R0, #0x8] // interrupt mask register is (base + 8)
  64:	e5801008 	str	r1, [r0, #8]
				
				BL CONFIG_GIC
  68:	eb000031 	bl	134 <CONFIG_GIC>
				MOV R1, #0b01010010 // IRQ 
  6c:	e3a01052 	mov	r1, #82	; 0x52
				MSR CPSR_c, R1
  70:	e121f001 	msr	CPSR_c, r1

00000074 <IDLE>:
                
IDLE:           B        IDLE  
  74:	eafffffe 	b	74 <IDLE>

00000078 <KEY_ISR>:


KEY_ISR:
LDR      R0, =0xFF200000 //base address for interrupts
  78:	e59f00a4 	ldr	r0, [pc, #164]	; 124 <SERVICE_FIQ+0x8>
LDR      R2, [R0, #0x5C]   //read edge capture register
  7c:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
STR      R2, [R0, #0x5C]   
  80:	e580205c 	str	r2, [r0, #92]	; 0x5c
LDR      R0, =BLANK
  84:	e59f009c 	ldr	r0, [pc, #156]	; 128 <SERVICE_FIQ+0xc>
LDR      R1, [R0]
  88:	e5901000 	ldr	r1, [r0]
EOR      R2, R1, R2
  8c:	e0212002 	eor	r2, r1, r2
STR      R2, [R0]
  90:	e5802000 	str	r2, [r0]

LDR      R0, =0xFF200020 //HEX3-0
  94:	e59f0090 	ldr	r0, [pc, #144]	; 12c <SERVICE_FIQ+0x10>
MOV      R1, #0
  98:	e3a01000 	mov	r1, #0

0000009c <CHK_KEY3>:

CHK_KEY3:
TST      R2, #0b1000      //KEY3 pressed?
  9c:	e3120008 	tst	r2, #8
BEQ      CHK_KEY2
  a0:	0a000001 	beq	ac <CHK_KEY2>

MOV      R3, #0b01001111
  a4:	e3a0304f 	mov	r3, #79	; 0x4f
ORR      R1, R1, R3, LSL #24
  a8:	e1811c03 	orr	r1, r1, r3, lsl #24

000000ac <CHK_KEY2>:

CHK_KEY2:
TST      R2, #0b0100      //KEY2 pressed?
  ac:	e3120004 	tst	r2, #4
BEQ      CHK_KEY1
  b0:	0a000001 	beq	bc <CHK_KEY1>
MOV      R3, #0b01011011
  b4:	e3a0305b 	mov	r3, #91	; 0x5b
ORR      R1, R1, R3, LSL #16
  b8:	e1811803 	orr	r1, r1, r3, lsl #16

000000bc <CHK_KEY1>:

CHK_KEY1:
TST      R2, #0b0010      //KEY1 pressed?
  bc:	e3120002 	tst	r2, #2
BEQ      CHK_KEY0
  c0:	0a000001 	beq	cc <CHK_KEY0>
MOV      R3, #0b00000110
  c4:	e3a03006 	mov	r3, #6
ORR      R1, R1, R3, LSL #8
  c8:	e1811403 	orr	r1, r1, r3, lsl #8

000000cc <CHK_KEY0>:

CHK_KEY0:
TST      R2, #0b0001      //KEY0 pressed?
  cc:	e3120001 	tst	r2, #1
BEQ      END_KEY_ISR
  d0:	0a000001 	beq	dc <END_KEY_ISR>
MOV      R3, #0b00111111
  d4:	e3a0303f 	mov	r3, #63	; 0x3f
ORR      R1, R1, R3
  d8:	e1811003 	orr	r1, r1, r3

000000dc <END_KEY_ISR>:


END_KEY_ISR:
STR      R1, [R0]
  dc:	e5801000 	str	r1, [r0]
MOV      PC, LR
  e0:	e1a0f00e 	mov	pc, lr

000000e4 <BLANK>:
  e4:	00000000 	.word	0x00000000

000000e8 <SERVICE_IRQ>:

BLANK:    .byte 0b00000000
            .skip 3				
				
				
SERVICE_IRQ:    PUSH     {R0-R7, LR}     
  e8:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                LDR      R4, =0xFFFEC100 // GIC CPU interface base address
  ec:	e59f403c 	ldr	r4, [pc, #60]	; 130 <SERVICE_FIQ+0x14>
                LDR      R5, [R4, #0x0C] // read the ICCIAR in the CPU
  f0:	e594500c 	ldr	r5, [r4, #12]

000000f4 <KEYS_HANDLER>:
                                         // interface

KEYS_HANDLER:                       
                CMP      R5, #73         // check the interrupt ID
  f4:	e3550049 	cmp	r5, #73	; 0x49

000000f8 <UNEXPECTED>:

UNEXPECTED:     BNE      UNEXPECTED      // if not recognized, stop here
  f8:	1afffffe 	bne	f8 <UNEXPECTED>
                BL       KEY_ISR         
  fc:	ebffffdd 	bl	78 <KEY_ISR>

00000100 <EXIT_IRQ>:

EXIT_IRQ:       STR      R5, [R4, #0x10] // write to the End of Interrupt
 100:	e5845010 	str	r5, [r4, #16]
                                         // Register (ICCEOIR)
                POP      {R0-R7, LR}     
 104:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                SUBS     PC, LR, #4      // return from exception
 108:	e25ef004 	subs	pc, lr, #4

0000010c <SERVICE_UND>:
				
/* Undefined instructions */
SERVICE_UND:
                    B   SERVICE_UND
 10c:	eafffffe 	b	10c <SERVICE_UND>

00000110 <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:
                    B   SERVICE_SVC
 110:	eafffffe 	b	110 <SERVICE_SVC>

00000114 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:
                    B   SERVICE_ABT_DATA
 114:	eafffffe 	b	114 <SERVICE_ABT_DATA>

00000118 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:
                    B   SERVICE_ABT_INST
 118:	eafffffe 	b	118 <SERVICE_ABT_INST>

0000011c <SERVICE_FIQ>:
SERVICE_FIQ:
                    B   SERVICE_FIQ
 11c:	eafffffe 	b	11c <SERVICE_FIQ>
 120:	ff200050 	.word	0xff200050
 124:	ff200000 	.word	0xff200000
 128:	000000e4 	.word	0x000000e4
 12c:	ff200020 	.word	0xff200020
 130:	fffec100 	.word	0xfffec100

00000134 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
 134:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* Configure the A9 Private Timer interrupt, FPGA KEYs, and FPGA Timer
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #MPCORE_PRIV_TIMER_IRQ
 138:	e3a0001d 	mov	r0, #29
    			MOV		R1, #CPU0
 13c:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 140:	eb00000d 	bl	17c <CONFIG_INTERRUPT>
    			MOV		R0, #INTERVAL_TIMER_IRQ
 144:	e3a00048 	mov	r0, #72	; 0x48
    			MOV		R1, #CPU0
 148:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 14c:	eb00000a 	bl	17c <CONFIG_INTERRUPT>
    			MOV		R0, #KEYS_IRQ
 150:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 154:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 158:	eb000007 	bl	17c <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 15c:	e59f0060 	ldr	r0, [pc, #96]	; 1c4 <__cs3_region_init_size_ram+0x14>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 160:	e59f1060 	ldr	r1, [pc, #96]	; 1c8 <__cs3_region_init_size_ram+0x18>
    			STR		R1, [R0, #0x04]
 164:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 168:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 16c:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 170:	e59f0054 	ldr	r0, [pc, #84]	; 1cc <__cs3_region_init_size_ram+0x1c>
    			STR		R1, [R0]    
 174:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 178:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000017c <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 17c:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 180:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 184:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 188:	e59f2040 	ldr	r2, [pc, #64]	; 1d0 <__cs3_region_init_size_ram+0x20>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 18c:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 190:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 194:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 198:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 19c:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 1a0:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 1a4:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 1a8:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 1ac:	e59f2020 	ldr	r2, [pc, #32]	; 1d4 <__cs3_region_init_size_ram+0x24>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 1b0:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 1b4:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 1b8:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 1bc:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
 1c0:	e8bd8030 	pop	{r4, r5, pc}
 1c4:	fffec100 	.word	0xfffec100
 1c8:	0000ffff 	.word	0x0000ffff
 1cc:	fffed000 	.word	0xfffed000
 1d0:	fffed100 	.word	0xfffed100
 1d4:	fffed800 	.word	0xfffed800
