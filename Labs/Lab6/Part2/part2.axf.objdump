
C:/intelFPGA_lite/18.0/Ece243/Lab6/Part2/part2.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000047 	b	128 <SERVICE_UND>
   8:	ea000047 	b	12c <SERVICE_SVC>
   c:	ea000048 	b	134 <SERVICE_ABT_INST>
  10:	ea000046 	b	130 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000029 	b	c4 <HPS_GPIO0_IRQ>
  1c:	ea000045 	b	138 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:

                  .text
                  .global  _start
_start:
/* Set up stack pointers for IRQ and SVC processor modes */
                  MOV      R0, #0b11010010    //IRQ mode bits
  40:	e3a000d2 	mov	r0, #210	; 0xd2
                  MSR      CPSR_c, R0        //change to IRQ mode
  44:	e121f000 	msr	CPSR_c, r0
                  LDRB     SP, =0x30000    //set SP
  48:	e3a0d803 	mov	sp, #196608	; 0x30000
                  MOV      R0, #0b11010011    //SVC mode bits
  4c:	e3a000d3 	mov	r0, #211	; 0xd3
                  MSR      CPSR, R0
  50:	e129f000 	msr	CPSR_fc, r0
                  LDR      SP, =0x3FFFFFFC
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

                  BL       CONFIG_GIC       // configure the ARM generic
  58:	eb000041 	bl	164 <CONFIG_GIC>
                                            // interrupt controller
                  BL       CONFIG_TIMER     // configure the Interval Timer
  5c:	eb000025 	bl	f8 <CONFIG_TIMER>
                  BL       CONFIG_KEYS      // configure the pushbutton
  60:	eb00002c 	bl	118 <CONFIG_KEYS>
                                            // KEYs port
											
/* Enable IRQ interrupts in the ARM processor */
                  MOV      R0, #0b01010010    //IRQ 
  64:	e3a00052 	mov	r0, #82	; 0x52
                  MSR      CPSR_c, R0        // interrupt
  68:	e121f000 	msr	CPSR_c, r0

                  LDR      R5, =0xFF200000  // LEDR base address
  6c:	e59f50d0 	ldr	r5, [pc, #208]	; 144 <RUN+0x4>

00000070 <LOOP>:
LOOP:                                          
                  LDR      R3, COUNT        // global variable
  70:	e59f30c4 	ldr	r3, [pc, #196]	; 13c <COUNT>
                  STR      R3, [R5]         // write to the LEDR lights
  74:	e5853000 	str	r3, [r5]
                  B        LOOP    
  78:	eafffffc 	b	70 <LOOP>

0000007c <KEY_ISR>:
				  
KEY_ISR:

				LDR      R0, =0xFF200000 //base address for interrupts
  7c:	e59f00c0 	ldr	r0, [pc, #192]	; 144 <RUN+0x4>
				LDR      R2, [R0, #0x5C]   //read edge capture register
  80:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
				STR      R2, [R0, #0x5C]   //RESET INTERUPT
  84:	e580205c 	str	r2, [r0, #92]	; 0x5c

				LDR      R3,=RUN //run in r3
  88:	e59f30b8 	ldr	r3, [pc, #184]	; 148 <RUN+0x8>
				LDR      R0,[R3] //RUN into R0
  8c:	e5930000 	ldr	r0, [r3]

				EOR      R0,#1 //TOGGLE
  90:	e2200001 	eor	r0, r0, #1
				STR      R0, [R3] //STORE BACK INTO RUN
  94:	e5830000 	str	r0, [r3]
				MOV      PC, LR 
  98:	e1a0f00e 	mov	pc, lr

0000009c <TIMER_ISR>:

TIMER_ISR:

				  LDR      R2, =COUNT //get the count value
  9c:	e59f20a8 	ldr	r2, [pc, #168]	; 14c <RUN+0xc>
                  LDR      R7, [R2]
  a0:	e5927000 	ldr	r7, [r2]
                  LDR      R3, =RUN  //get the run value
  a4:	e59f309c 	ldr	r3, [pc, #156]	; 148 <RUN+0x8>
                  LDR      R3, [R3]
  a8:	e5933000 	ldr	r3, [r3]
				  ADD      R7,R3 //add to sum
  ac:	e0877003 	add	r7, r7, r3
				  STR      R7,[R2]//store sum
  b0:	e5827000 	str	r7, [r2]
                  LDR      R0, =0xFF202000
  b4:	e59f0094 	ldr	r0, [pc, #148]	; 150 <RUN+0x10>
                  MOV      R2, #0
  b8:	e3a02000 	mov	r2, #0
                  STR      R2, [R0] //reset interrupt
  bc:	e5802000 	str	r2, [r0]

				  MOV PC,LR
  c0:	e1a0f00e 	mov	pc, lr

000000c4 <SERVICE_IRQ>:
				  
SERVICE_IRQ:      PUSH     {R0-R7, LR}
  c4:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                  LDR      R4, =0xFFFEC100 // GIC CPU interface base address
  c8:	e59f4084 	ldr	r4, [pc, #132]	; 154 <RUN+0x14>
                  LDR      R1, [R4, #0x0C] // read the ICCIAR in the CPU
  cc:	e594100c 	ldr	r1, [r4, #12]

000000d0 <TIMER_HANDLER>:
                                                             // interface

TIMER_HANDLER:    CMP      R1, #72 //compare
  d0:	e3510048 	cmp	r1, #72	; 0x48
                  BNE      KEYS_HANDLER // if not the same go to KEYS
  d4:	1a000001 	bne	e0 <KEYS_HANDLER>
                  BL       TIMER_ISR // check timer 
  d8:	ebffffef 	bl	9c <TIMER_ISR>
                  B        EXIT_IRQ
  dc:	ea000002 	b	ec <EXIT_IRQ>

000000e0 <KEYS_HANDLER>:

KEYS_HANDLER:                       
                CMP      R1, #73         // check the interrupt ID
  e0:	e3510049 	cmp	r1, #73	; 0x49

000000e4 <UNEXPECTED>:

UNEXPECTED:     BNE      UNEXPECTED      // if not recognized, stop here
  e4:	1afffffe 	bne	e4 <UNEXPECTED>
                BL       KEY_ISR         
  e8:	ebffffe3 	bl	7c <KEY_ISR>

000000ec <EXIT_IRQ>:

EXIT_IRQ:       STR      R1, [R4, #0x10] // write to the End of Interrupt
  ec:	e5841010 	str	r1, [r4, #16]
                                         // Register (ICCEOIR)
                POP      {R0-R7, LR}     
  f0:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                SUBS     PC, LR, #4      // return from exception
  f4:	e25ef004 	subs	pc, lr, #4

000000f8 <CONFIG_TIMER>:
											
											
/* Configure the Interval Timer to create interrupts at 0.25 second intervals */
CONFIG_TIMER:
                  //101111101
                  LDR   R3, =0xFF202000     //BASE of interval timer register
  f8:	e59f3050 	ldr	r3, [pc, #80]	; 150 <RUN+0x10>
				  //loading twice cause move too small
                  LDR   R2, =0b0111100001000000 //lower bits of .25 second time
  fc:	e59f2054 	ldr	r2, [pc, #84]	; 158 <RUN+0x18>
                  STR   R2, [R3, #8]
 100:	e5832008 	str	r2, [r3, #8]
                  LDR   R2, =0b0000000101111101 //upper bits of .25 second time
 104:	e59f2050 	ldr	r2, [pc, #80]	; 15c <RUN+0x1c>
                  STR   R2, [R3, #0xC]
 108:	e583200c 	str	r2, [r3, #12]
                  MOV   R2, #0b111   //enable Interrupt, run, and contnue
 10c:	e3a02007 	mov	r2, #7
                  STR   R2, [R3, #4]        //start timer
 110:	e5832004 	str	r2, [r3, #4]
                  BX       LR											
 114:	e12fff1e 	bx	lr

00000118 <CONFIG_KEYS>:
											
/* Configure the pushbutton KEYS to generate interrupts */
CONFIG_KEYS:
                  LDR      R2, =0xFF200058 //base address for interrupts
 118:	e59f2040 	ldr	r2, [pc, #64]	; 160 <RUN+0x20>
                  MOV      R3, #0b1111
 11c:	e3a0300f 	mov	r3, #15
                  STR      R3, [R2]          //set interrupt mask to 0b1111
 120:	e5823000 	str	r3, [r2]
				  BX   	LR
 124:	e12fff1e 	bx	lr

00000128 <SERVICE_UND>:
/* Undefined instructions */
SERVICE_UND:
                  B   SERVICE_UND
 128:	eafffffe 	b	128 <SERVICE_UND>

0000012c <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:
                  B   SERVICE_SVC
 12c:	eafffffe 	b	12c <SERVICE_SVC>

00000130 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:
                  B   SERVICE_ABT_DATA
 130:	eafffffe 	b	130 <SERVICE_ABT_DATA>

00000134 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:
                  B   SERVICE_ABT_INST
 134:	eafffffe 	b	134 <SERVICE_ABT_INST>

00000138 <SERVICE_FIQ>:
SERVICE_FIQ:
                  B   SERVICE_FIQ
 138:	eafffffe 	b	138 <SERVICE_FIQ>

0000013c <COUNT>:
 13c:	00000000 	.word	0x00000000

00000140 <RUN>:
 140:	00000001 	.word	0x00000001
 144:	ff200000 	.word	0xff200000
 148:	00000140 	.word	0x00000140
 14c:	0000013c 	.word	0x0000013c
 150:	ff202000 	.word	0xff202000
 154:	fffec100 	.word	0xfffec100
 158:	00007840 	.word	0x00007840
 15c:	0000017d 	.word	0x0000017d
 160:	ff200058 	.word	0xff200058

00000164 <CONFIG_GIC>:
 164:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 168:	e3a0001d 	mov	r0, #29
 16c:	e3a01001 	mov	r1, #1
 170:	eb00000d 	bl	1ac <CONFIG_INTERRUPT>
 174:	e3a00048 	mov	r0, #72	; 0x48
 178:	e3a01001 	mov	r1, #1
 17c:	eb00000a 	bl	1ac <CONFIG_INTERRUPT>
 180:	e3a00049 	mov	r0, #73	; 0x49
 184:	e3a01001 	mov	r1, #1
 188:	eb000007 	bl	1ac <CONFIG_INTERRUPT>
 18c:	e59f0060 	ldr	r0, [pc, #96]	; 1f4 <__cs3_region_init_size_ram+0x4>
 190:	e59f1060 	ldr	r1, [pc, #96]	; 1f8 <__cs3_region_init_size_ram+0x8>
 194:	e5801004 	str	r1, [r0, #4]
 198:	e3a01001 	mov	r1, #1
 19c:	e5801000 	str	r1, [r0]
 1a0:	e59f0054 	ldr	r0, [pc, #84]	; 1fc <__cs3_region_init_size_ram+0xc>
 1a4:	e5801000 	str	r1, [r0]
 1a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000001ac <CONFIG_INTERRUPT>:
 1ac:	e92d4030 	push	{r4, r5, lr}
 1b0:	e1a041a0 	lsr	r4, r0, #3
 1b4:	e3c44003 	bic	r4, r4, #3
 1b8:	e59f2040 	ldr	r2, [pc, #64]	; 200 <__cs3_region_init_size_ram+0x10>
 1bc:	e0824004 	add	r4, r2, r4
 1c0:	e200201f 	and	r2, r0, #31
 1c4:	e3a05001 	mov	r5, #1
 1c8:	e1a02215 	lsl	r2, r5, r2
 1cc:	e5943000 	ldr	r3, [r4]
 1d0:	e1833002 	orr	r3, r3, r2
 1d4:	e5843000 	str	r3, [r4]
 1d8:	e3c04003 	bic	r4, r0, #3
 1dc:	e59f2020 	ldr	r2, [pc, #32]	; 204 <__cs3_region_init_size_ram+0x14>
 1e0:	e0824004 	add	r4, r2, r4
 1e4:	e2002003 	and	r2, r0, #3
 1e8:	e0824004 	add	r4, r2, r4
 1ec:	e5c41000 	strb	r1, [r4]
 1f0:	e8bd8030 	pop	{r4, r5, pc}
 1f4:	fffec100 	.word	0xfffec100
 1f8:	0000ffff 	.word	0x0000ffff
 1fc:	fffed000 	.word	0xfffed000
 200:	fffed100 	.word	0xfffed100
 204:	fffed800 	.word	0xfffed800

00000208 <SERVICE_UND>:
 208:	eafffffe 	b	208 <SERVICE_UND>

0000020c <SERVICE_SVC>:
 20c:	eafffffe 	b	20c <SERVICE_SVC>

00000210 <SERVICE_ABT_DATA>:
 210:	eafffffe 	b	210 <SERVICE_ABT_DATA>

00000214 <SERVICE_ABT_INST>:
 214:	eafffffe 	b	214 <SERVICE_ABT_INST>

00000218 <SERVICE_FIQ>:
 218:	eafffffe 	b	218 <SERVICE_FIQ>
